{"version":3,"sources":["actions/index.tsx","actions/types.tsx","utils/slate/initialValue.tsx","reducers/index.tsx","sagas/selectors.tsx","sagas/firebaseConfig.tsx","sagas/firebaseSaga.tsx","sagas/notesListSaga.tsx","sagas/index.tsx","store/index.tsx","components/SignIn/SignIn-view.tsx","components/SignIn/index.tsx","components/SignIn/SignIn-redux.tsx","components/SignOut/SignOut-view.tsx","components/SignOut/index.tsx","components/SignOut/SignOut-redux.tsx","components/NavBar/NavBar-view.tsx","components/NavBar/index.tsx","components/NavBar/NavBar-redux.tsx","components/DeleteNoteButton/DeleteNoteButton-view.tsx","components/DeleteNoteButton/index.tsx","components/DeleteNoteButton/DeleteNoteButton-redux.tsx","components/NavigatorItem/NavigatorItem-view.tsx","components/NavigatorItem/index.tsx","components/NavigatorItem/NavigatorItem-redux.tsx","components/NewNoteButton/NewNoteButton-view.tsx","components/NewNoteButton/index.tsx","components/NewNoteButton/NewNoteButton-redux.tsx","components/Navigator/Navigator-view.tsx","components/Navigator/index.tsx","components/Navigator/Navigator-redux.tsx","utils/slate/plugins/MarkHotKey.tsx","components/NoteToolbar/index.tsx","components/NoteToolbar/NoteToolbar-view.tsx","components/ToolbarButton/index.tsx","components/ToolbarButton/ToolbarButton-view.tsx","components/NoteTitle/NoteTitle-view.tsx","components/NoteTitle/index.tsx","components/NoteTitle/NoteTitle-redux.tsx","components/SyncedStatus/index.tsx","components/SyncedStatus/SyncedStatus-view.tsx","components/LastModified/LastModified-view.tsx","components/LastModified/index.tsx","components/LastModified/LastModified-redux.tsx","components/NoteEditor/NoteEditor-view.tsx","components/NoteEditor/index.tsx","components/NoteEditor/NoteEditor-redux.tsx","components/App/App.tsx","serviceWorker.js","index.tsx"],"names":["updateUserAction","user","type","types","updateUserNotesAction","notesList","deleteNoteAction","noteId","lastModified","active","setNoteActiveAction","setActiveNoteValueAction","activeNoteId","value","updateLastModified","preview","removeAllNotesAction","updateSyncedStatusAction","synced","firestoreChangeDetectedAction","doc","firebaseSignInAction","firebaseSignOutAction","UPDATE_USER","ADD_NEW_NOTE","DELETE_NOTE","SET_NOTE_ACTIVE","SET_ACTIVE_NOTE_VALUE","SET_NOTE_TITLE","STORE_NOTES_LIST","REMOVE_ALL_NOTES","UPDATE_SYNCED_STATUS","FIRESTORE_CHANGE_DETECTED","FIREBASE_SIGNIN","FIREBASE_SIGNOUT","FIREBASE_AUTH_STATE_CHANGED","Value","fromJSON","document","nodes","object","text","initialState","rootReducer","state","arguments","length","undefined","action","Object","objectSpread","keys","reduce","result","key","defineProperty","data","title","initialValue","Date","getTime","newNotesList","getNotesList","getUser","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseSaga","signIn","signOut","authStateChanged","getNotesListFromFirestore","firestoreSetActiveNoteValue","firestoreSetNoteActive","firestoreAddNewNote","firestoreDeleteNote","firestoreSetNoteTitle","processFirestoreChanged","firebaseApp","firebase","initializeApp","config","rsf","ReduxSagaFirebase","authProvider","auth","GoogleAuthProvider","regenerator_default","a","wrap","_context","prev","next","takeEvery","debounce","stop","_marked","_context2","call","signInWithPopup","t0","console","error","_marked2","_context3","_marked3","_ref","_context4","put","fork","firestore","syncDocument","concat","email","successActionCreator","snapshot","failureActionCreator","err","_marked4","secret","ids","_context5","getDocument","sent","uid","id","decryptNote","_marked5","_ref2","_context6","select","setDocument","encryptNote","merge","_marked6","_ref3","noteIds","batch","_context7","_marked7","_ref4","_context8","_marked8","_ref5","_context9","updateDocument","FieldValue","delete","_marked9","_ref6","_context10","_marked10","_ref7","remoteNotesList","decryptedNotesList","_context11","isEqual","JSON","stringify","_marked11","onAuthStateChanged","store","dispatch","firebaseAuthStateChangedAction","note","CryptoJS","AES","encrypt","toString","decrypted","parse","decrypt","enc","Utf8","notesListSaga","updateActiveNoteSaga","notesListSaga_marked","sortedKeys","nextActiveId","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","sort","b","Symbol","iterator","done","abrupt","return","finish","notesListSaga_marked2","rootSaga","all","sagas_marked","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","logger","run","SignIn","onClick","_this","props","react_default","createElement","Button_default","this","Component","connect","SignOut","NavBar","Navbar_default","bg","variant","expand","Brand","href","Nav_default","className","components_SignOut","components_SignIn","DeleteNoteButton","e","stopPropagation","_this2","react_icons_kit_default","icon","ic_delete","NavigatorItem","classes","classNames","components_DeleteNoteButton","newNoteId","uuid","NewNoteButton","es_Button","Navigator","list","forEach","push","components_NavigatorItem","react","components_NewNoteButton","getListOfItems","MarkHotKey","options","onKeyDown","event","editor","metaKey","preventDefault","toggleMark","NoteToolbar","assign","ToolbarButton","onPointerDown","onChange","target","find","setNoteTitleAction","keyCode","NoteTitle","maxLength","evt","placeholder","SyncedStatus","Spinner","size","animation","role","ic_done","convertEpochToDate","epoch","toLocaleString","LastModified","date","components_SyncedStatus","DEFAULT_NODE","NoteEditor","classCallCheck","possibleConstructorReturn","getPrototypeOf","pluginList","ref","getActiveNote","values","activeNote","changed","toJSON","hasBlock","blocks","some","node","hasMark","activeMarks","mark","onBlockClick","assertThisInitialized","isActive","setBlocks","unwrapBlock","isList","isType","block","getClosest","parent","wrapBlock","onMarkClick","renderBlock","attributes","children","renderMark","property","renderBlockButton","includes","_activeNote$data$valu","getParent","first","components_ToolbarButton","plugins","components_NoteTitle","components_NoteToolbar","renderMarkButton","icons","slate_react_es","autoFocus","components_LastModified","App","components_NavBar","Row","Col","sm","md","lg","components_Navigator","components_NoteEditor","Boolean","window","location","hostname","match","ReactDOM","render","es","components_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5a90dc9.chunk.js","sourcesContent":["import * as types from './types';\nimport { INotesList } from '../interfaces';\nimport { Value } from 'slate';\n\nexport const updateUserAction = (\n  user: firebase.User | null\n): types.ActionTypes => ({\n  type: types.UPDATE_USER,\n  user,\n});\n\nexport const updateUserNotesAction = (\n  notesList: INotesList\n): types.ActionTypes => ({\n  type: types.STORE_NOTES_LIST,\n  notesList,\n});\n\nexport const addNewNoteAction = (noteId: string): types.ActionTypes => ({\n  type: types.ADD_NEW_NOTE,\n  noteId,\n});\n\nexport const deleteNoteAction = (\n  noteId: string,\n  lastModified: number,\n  active: boolean\n): types.ActionTypes => ({\n  type: types.DELETE_NOTE,\n  noteId,\n  lastModified,\n  active,\n});\n\nexport const setNoteActiveAction = (noteId: string): types.ActionTypes => ({\n  type: types.SET_NOTE_ACTIVE,\n  noteId,\n});\n\nexport const setActiveNoteValueAction = (\n  activeNoteId: string,\n  value: Value,\n  updateLastModified: boolean,\n  preview: string\n): types.ActionTypes => ({\n  type: types.SET_ACTIVE_NOTE_VALUE,\n  activeNoteId,\n  value,\n  updateLastModified,\n  preview,\n});\n\nexport const setNoteTitleAction = (\n  activeNoteId: string,\n  title: string\n): types.ActionTypes => ({\n  type: types.SET_NOTE_TITLE,\n  activeNoteId,\n  title,\n});\n\nexport const removeAllNotesAction = (): types.ActionTypes => ({\n  type: types.REMOVE_ALL_NOTES,\n});\n\nexport const updateSyncedStatusAction = (\n  synced: boolean\n): types.ActionTypes => ({\n  type: types.UPDATE_SYNCED_STATUS,\n  synced,\n});\n\nexport const firestoreChangeDetectedAction = (\n  doc: firebase.firestore.DocumentSnapshot,\n  user: firebase.User\n): types.ActionTypes => ({\n  type: types.FIRESTORE_CHANGE_DETECTED,\n  doc,\n  user,\n});\n\nexport const firebaseSignInAction = (): types.ActionTypes => ({\n  type: types.FIREBASE_SIGNIN,\n});\n\nexport const firebaseSignOutAction = (): types.ActionTypes => ({\n  type: types.FIREBASE_SIGNOUT,\n});\n\nexport const firebaseAuthStateChangedAction = (\n  user: firebase.User | null\n): types.ActionTypes => ({\n  type: types.FIREBASE_AUTH_STATE_CHANGED,\n  user,\n});\n","import { INotesList } from '../interfaces';\nimport { Value } from 'slate';\nimport { removeAllNotesAction, firebaseSignOutAction } from '.';\n\nexport const UPDATE_USER = 'UPDATE_USER';\ninterface updateUserAction {\n  type: typeof UPDATE_USER;\n  user: firebase.User | null;\n}\n\nexport const ADD_NEW_NOTE = 'ADD_NEW_NOTE';\ninterface addNewNoteAction {\n  type: typeof ADD_NEW_NOTE;\n  noteId: string;\n}\n\nexport const DELETE_NOTE = 'DELETE_NOTE';\ninterface deleteNoteAction {\n  type: typeof DELETE_NOTE;\n  noteId: string;\n  lastModified: number;\n  active: boolean;\n}\n\nexport const SET_NOTE_ACTIVE = 'SET_NOTE_ACTIVE';\ninterface setNoteActiveAction {\n  type: typeof SET_NOTE_ACTIVE;\n  noteId: string;\n}\n\nexport const SET_ACTIVE_NOTE_VALUE = 'SET_ACTIVE_NOTE_VALUE';\ninterface setActiveNoteValueAction {\n  type: typeof SET_ACTIVE_NOTE_VALUE;\n  value: Value;\n  activeNoteId: string;\n  updateLastModified: boolean;\n  preview: string;\n}\n\nexport const SET_NOTE_TITLE = 'SET_NOTE_TITLE';\ninterface setNoteTitleAction {\n  type: typeof SET_NOTE_TITLE;\n  title: string;\n  activeNoteId: string;\n}\n\nexport const STORE_NOTES_LIST = 'STORE_NOTES_LIST';\ninterface storeNotesListAction {\n  type: typeof STORE_NOTES_LIST;\n  notesList: INotesList;\n}\n\nexport const REMOVE_ALL_NOTES = 'REMOVE_ALL_NOTES';\ninterface removeAllNotesAction {\n  type: typeof REMOVE_ALL_NOTES;\n}\n\nexport const UPDATE_SYNCED_STATUS = 'UPDATE_SYNCED_STATUS';\ninterface updateSyncedStatusAction {\n  type: typeof UPDATE_SYNCED_STATUS;\n  synced: boolean;\n}\n\nexport const FIRESTORE_CHANGE_DETECTED = 'FIRESTORE_CHANGE_DETECTED';\ninterface firestoreChangeDetectedAction {\n  type: typeof FIRESTORE_CHANGE_DETECTED;\n  doc: firebase.firestore.DocumentSnapshot;\n  user: firebase.User;\n}\n\nexport const FIREBASE_SIGNIN = 'FIREBASE_SIGNIN';\n\ninterface firebaseSignInAction {\n  type: typeof FIREBASE_SIGNIN;\n}\n\nexport const FIREBASE_SIGNOUT = 'FIREBASE_SIGNOUT';\n\ninterface firebaseSignOutAction {\n  type: typeof FIREBASE_SIGNOUT;\n}\n\nexport const FIREBASE_AUTH_STATE_CHANGED = 'FIREBASE_AUTH_STATE_CHANGED';\n\ninterface firebaseAuthStateChangedAction {\n  type: typeof FIREBASE_AUTH_STATE_CHANGED;\n  user: firebase.User | null;\n}\n\nexport type ActionTypes =\n  | updateUserAction\n  | setNoteActiveAction\n  | setActiveNoteValueAction\n  | setNoteTitleAction\n  | addNewNoteAction\n  | deleteNoteAction\n  | storeNotesListAction\n  | removeAllNotesAction\n  | updateSyncedStatusAction\n  | firestoreChangeDetectedAction\n  | firebaseSignInAction\n  | firebaseSignOutAction\n  | firebaseAuthStateChangedAction;\n","import { Value } from 'slate';\n\nexport default Value.fromJSON({\n  document: {\n    nodes: [\n      {\n        object: 'block',\n        type: 'paragraph',\n        nodes: [\n          {\n            object: 'text',\n            text: '',\n          },\n        ],\n      },\n    ],\n  },\n});\n","import * as types from '../actions/types';\nimport initialValue from '../utils/slate/initialValue';\nimport { INotesList } from '../interfaces';\nimport { Value } from 'slate';\n\ninterface IState {\n  user: firebase.User | null;\n  notesList: {\n    [key: string]: {\n      active: boolean;\n      lastModified: number;\n      data: {\n        title: string;\n        preview: string;\n        value: Value;\n      };\n    };\n  };\n  synced: boolean;\n}\n\nexport const initialState: IState = {\n  user: null,\n  notesList: {},\n  synced: false,\n};\n\nfunction rootReducer(state = initialState, action: types.ActionTypes): IState {\n  switch (action.type) {\n    case types.UPDATE_USER: {\n      return { ...state, user: action.user };\n    }\n\n    case types.ADD_NEW_NOTE: {\n      return {\n        ...state,\n        notesList: {\n          ...Object.keys(state.notesList).reduce(\n            (result: INotesList, key: string) => {\n              result[key] = state.notesList[key];\n              result[key].active = false;\n              return result;\n            },\n            {}\n          ),\n          [action.noteId]: {\n            data: {\n              title: '',\n              preview: '',\n              value: initialValue,\n            },\n            active: true,\n            lastModified: new Date().getTime(),\n          },\n        },\n      };\n    }\n\n    case types.DELETE_NOTE: {\n      let newNotesList = { ...state.notesList };\n      delete newNotesList[action.noteId];\n      return {\n        ...state,\n        notesList: newNotesList,\n      };\n    }\n\n    case types.SET_NOTE_ACTIVE: {\n      return {\n        ...state,\n        notesList: {\n          ...Object.keys(state.notesList).reduce(\n            (result: INotesList, key: string) => {\n              result[key] = state.notesList[key];\n              result[key].active = false;\n              return result;\n            },\n            {}\n          ),\n          [action.noteId]: {\n            ...state.notesList[action.noteId],\n            active: true,\n          },\n        },\n      };\n    }\n\n    case types.SET_ACTIVE_NOTE_VALUE: {\n      return {\n        ...state,\n        notesList: {\n          ...state.notesList,\n          [action.activeNoteId]: {\n            ...state.notesList[action.activeNoteId],\n            data: {\n              ...state.notesList[action.activeNoteId].data,\n              value: action.value,\n              preview: action.preview,\n            },\n            lastModified: action.updateLastModified\n              ? new Date().getTime()\n              : state.notesList[action.activeNoteId].lastModified,\n          },\n        },\n      };\n    }\n\n    case types.SET_NOTE_TITLE: {\n      return {\n        ...state,\n        notesList: {\n          ...state.notesList,\n          [action.activeNoteId]: {\n            ...state.notesList[action.activeNoteId],\n            data: {\n              ...state.notesList[action.activeNoteId].data,\n              title: action.title,\n            },\n            lastModified: new Date().getTime(),\n          },\n        },\n      };\n    }\n\n    case types.STORE_NOTES_LIST: {\n      return {\n        ...state,\n        notesList: action.notesList,\n      };\n    }\n\n    case types.REMOVE_ALL_NOTES: {\n      return {\n        ...state,\n        notesList: {},\n      };\n    }\n\n    case types.UPDATE_SYNCED_STATUS: {\n      return {\n        ...state,\n        synced: action.synced,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n","import { INotesList } from '../interfaces';\n\ninterface IState {\n  notesList: INotesList;\n  user: firebase.User;\n}\n\nexport const getNotesList = (state: IState) => state.notesList;\nexport const getUser = (state: IState) => state.user;\n","var firebaseConfig = {\n  apiKey: 'AIzaSyDqk-tCkJUNKqN1rwhHDvOUrMQ80KDdnYI',\n  authDomain: 'fouronesixnine-notes-app.firebaseapp.com',\n  databaseURL: 'https://fouronesixnine-notes-app.firebaseio.com',\n  projectId: 'fouronesixnine-notes-app',\n  storageBucket: '',\n  messagingSenderId: '967381980154',\n  appId: '1:967381980154:web:5a5a8276ddab77a1',\n};\n\nexport default firebaseConfig;\n","import { takeEvery, select, put, call, debounce, fork } from 'redux-saga/effects';\nimport * as types from '../actions/types';\nimport { getNotesList, getUser } from './selectors';\nimport { isEqual } from 'lodash';\nimport {\n  updateSyncedStatusAction,\n  updateUserAction,\n  firebaseAuthStateChangedAction,\n  updateUserNotesAction,\n  firestoreChangeDetectedAction,\n} from '../actions';\nimport CryptoJS from 'crypto-js';\nimport 'regenerator-runtime/runtime';\nimport { INotesList, INote, IEncryptedNote } from '../interfaces';\n\nimport firebase from 'firebase/app';\nimport '@firebase/auth';\nimport '@firebase/firestore';\nimport config from './firebaseConfig';\nimport ReduxSagaFirebase from 'redux-saga-firebase';\nimport store from '../store';\nimport { Value } from 'slate';\n\nconst firebaseApp = firebase.initializeApp(config);\nconst rsf = new ReduxSagaFirebase(firebaseApp);\nconst authProvider = new firebase.auth.GoogleAuthProvider();\n\nfirebase.auth().onAuthStateChanged(user => {\n  store.dispatch(firebaseAuthStateChangedAction(user));\n});\n\nexport function* firebaseSaga() {\n  yield takeEvery(types.FIREBASE_SIGNIN, signIn);\n  yield takeEvery(types.FIREBASE_SIGNOUT, signOut);\n  yield takeEvery(types.FIREBASE_AUTH_STATE_CHANGED, authStateChanged);\n  yield takeEvery(types.DELETE_NOTE, firestoreDeleteNote);\n  yield takeEvery(types.ADD_NEW_NOTE, firestoreAddNewNote);\n  yield takeEvery(types.FIRESTORE_CHANGE_DETECTED, processFirestoreChanged);\n  yield debounce(2000, types.SET_NOTE_ACTIVE, firestoreSetNoteActive);\n  yield debounce(2000, types.SET_ACTIVE_NOTE_VALUE, firestoreSetActiveNoteValue);\n  yield debounce(2000, types.SET_NOTE_TITLE, firestoreSetNoteTitle);\n}\n\nfunction* signIn() {\n  try {\n    yield call(rsf.auth.signInWithPopup, authProvider);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction* signOut() {\n  try {\n    yield call(rsf.auth.signOut);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction* authStateChanged({\n  user,\n}: {\n  type: typeof types.FIREBASE_AUTH_STATE_CHANGED;\n  user: firebase.User | null;\n}) {\n  yield put(updateUserAction(user));\n  if (user) {\n    yield call(getNotesListFromFirestore, user);\n    yield fork(rsf.firestore.syncDocument as any, `notes/${user.email}`, {\n      successActionCreator: (snapshot: firebase.firestore.DocumentSnapshot) =>\n        firestoreChangeDetectedAction(snapshot, user),\n      failureActionCreator: (err: any) => console.error(err),\n    });\n  }\n}\n\nfunction* getNotesListFromFirestore(user: firebase.User) {\n  try {\n    let document = yield rsf.firestore.getDocument(`notes/${user.email}`);\n    let notesList = document.data();\n    let secret = user.uid;\n    if (notesList) {\n      let ids = Object.keys(notesList);\n      notesList = ids.reduce((result: INotesList, id: string) => {\n        result[id] = decryptNote(notesList[id], secret);\n        return result;\n      }, {});\n      yield put(updateUserNotesAction(notesList));\n    }\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction* firestoreSetActiveNoteValue({\n  activeNoteId,\n}: {\n  type: typeof types.SET_ACTIVE_NOTE_VALUE;\n  activeNoteId: string;\n}) {\n  try {\n    let user = yield select(getUser);\n    let notesList = yield select(getNotesList);\n    let secret = user.uid;\n    if (Object.keys(notesList).length > 0) {\n      yield call(\n        rsf.firestore.setDocument,\n        `notes/${user.email}`,\n        {\n          [activeNoteId]: encryptNote(notesList[activeNoteId], secret),\n        },\n        { merge: true }\n      );\n    }\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction* firestoreSetNoteActive({\n  noteId,\n}: {\n  type: typeof types.SET_NOTE_ACTIVE;\n  noteId: string;\n}) {\n  try {\n    let user = yield select(getUser);\n    let snapshot = yield call(rsf.firestore.getDocument, `notes/${user.email}`);\n    let document = snapshot.data();\n    let noteIds = Object.keys(document);\n    let batch = noteIds.reduce((result: { [id: string]: {} }, id: string) => {\n      result[id] = { active: id === noteId ? true : false };\n      return result;\n    }, {});\n    yield call(rsf.firestore.setDocument, `notes/${user.email}`, batch, {\n      merge: true,\n    });\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction* firestoreAddNewNote({ noteId }: { type: typeof types.ADD_NEW_NOTE; noteId: string }) {\n  try {\n    let user = yield select(getUser);\n    let notesList = yield select(getNotesList);\n    let snapshot = yield call(rsf.firestore.getDocument, `notes/${user.email}`);\n    let document = snapshot.data();\n    let noteIds = Object.keys(document);\n    let batch = noteIds.reduce((result: { [id: string]: {} }, id: string) => {\n      result[id] = { active: id === noteId ? true : false };\n      return result;\n    }, {});\n    let secret = user.uid;\n    batch = { ...batch, [noteId]: encryptNote(notesList[noteId], secret) };\n    yield call(rsf.firestore.setDocument, `notes/${user.email}`, batch, {\n      merge: true,\n    });\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction* firestoreDeleteNote({ noteId }: { type: typeof types.DELETE_NOTE; noteId: string }) {\n  try {\n    let user = yield select(getUser);\n    yield call(rsf.firestore.updateDocument, `notes/${user.email}`, {\n      [noteId]: firebase.firestore.FieldValue.delete(),\n    });\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction* firestoreSetNoteTitle({\n  activeNoteId,\n}: {\n  type: typeof types.SET_NOTE_TITLE;\n  activeNoteId: string;\n}) {\n  try {\n    let notesList = yield select(getNotesList);\n    let user = yield select(getUser);\n    let secret = user.uid;\n    yield call(\n      rsf.firestore.setDocument,\n      `notes/${user.email}`,\n      {\n        [activeNoteId]: encryptNote(notesList[activeNoteId], secret),\n      },\n      { merge: true }\n    );\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction* processFirestoreChanged({\n  doc,\n  user,\n}: {\n  type: typeof types.FIRESTORE_CHANGE_DETECTED;\n  doc: firebase.firestore.DocumentSnapshot;\n  user: firebase.User;\n}) {\n  let notesList = yield select(getNotesList);\n  let remoteNotesList: { [id: string]: IEncryptedNote } | undefined = doc.data();\n  let secret = user.uid;\n  let decryptedNotesList = Object.keys(remoteNotesList as { [id: string]: IEncryptedNote }).reduce(\n    (result: INotesList, id: string) => {\n      result[id] = decryptNote(remoteNotesList![id], secret);\n      return result;\n    },\n    {}\n  );\n  let equal = isEqual(JSON.stringify(notesList), JSON.stringify(decryptedNotesList));\n  if (equal) {\n    yield put(updateSyncedStatusAction(true));\n  }\n}\n\nconst encryptNote = (\n  note: INote,\n  secret: string\n): { active: boolean; lastModified: number; data: string } => {\n  return {\n    active: note.active,\n    lastModified: note.lastModified,\n    data: CryptoJS.AES.encrypt(JSON.stringify(note.data), secret).toString(),\n  };\n};\n\nconst decryptNote = (\n  note: { lastModified: number; active: boolean; data: string },\n  secret: string\n): INote => {\n  let decrypted = {\n    lastModified: note.lastModified,\n    active: note.active,\n    data: {\n      ...JSON.parse(CryptoJS.AES.decrypt(note.data, secret).toString(CryptoJS.enc.Utf8)),\n    },\n  };\n  decrypted.data.value = Value.fromJSON(decrypted.data.value);\n  return decrypted;\n};\n","import { takeEvery, select, put } from 'redux-saga/effects';\nimport * as types from '../actions/types';\nimport { getNotesList } from './selectors';\nimport { setNoteActiveAction } from '../actions';\n\nexport function* notesListSaga() {\n  yield takeEvery(types.DELETE_NOTE, updateActiveNoteSaga);\n}\n\nfunction* updateActiveNoteSaga({\n  noteId,\n  lastModified,\n  active,\n}: {\n  type: typeof types.DELETE_NOTE;\n  noteId: string;\n  lastModified: number;\n  active: boolean;\n}) {\n  let notesList = yield select(getNotesList);\n  if (active && Object.keys(notesList).length > 0) {\n    let keys = Object.keys(notesList);\n    let sortedKeys = keys.sort((a, b) =>\n      notesList[a].lastModified < notesList[b].lastModified ? 1 : -1\n    );\n    let nextActiveId;\n    for (let key of sortedKeys) {\n      if (notesList[key].lastModified > lastModified) {\n        continue;\n      } else {\n        nextActiveId = key;\n        break;\n      }\n    }\n    if (!nextActiveId) {\n      nextActiveId = sortedKeys[sortedKeys.length - 1];\n    }\n    yield put(setNoteActiveAction(nextActiveId));\n  }\n}\n","import { all } from 'redux-saga/effects';\nimport { firebaseSaga } from './firebaseSaga';\nimport { notesListSaga } from './notesListSaga';\n\nexport default function* rootSaga() {\n  yield all([firebaseSaga(), notesListSaga()]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, applyMiddleware(logger, sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { firebaseSignInAction } from '../../actions';\nimport { ActionTypes } from '../../actions/types';\n\ninterface IProps {\n  dispatch: (arg0: ActionTypes) => void;\n}\nclass SignIn extends Component<IProps> {\n  onClick = () => {\n    this.props.dispatch(firebaseSignInAction());\n  };\n\n  render() {\n    return (\n      <div>\n        <Button onClick={this.onClick}>Sign In</Button>\n      </div>\n    );\n  }\n}\n\nexport default SignIn;\n","import SignIn from './SignIn-redux';\n\nexport default SignIn;\n","import SignIn from './SignIn-view';\nimport { connect } from 'react-redux';\n\nexport default connect()(SignIn);\n","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { removeAllNotesAction, firebaseSignOutAction } from '../../actions';\nimport { ActionTypes } from '../../actions/types';\n\ninterface IProps {\n  dispatch: (arg0: ActionTypes) => void;\n}\nclass SignOut extends Component<IProps> {\n  onClick = () => {\n    this.props.dispatch(firebaseSignOutAction());\n    this.props.dispatch(removeAllNotesAction());\n  };\n\n  render() {\n    return (\n      <div>\n        <Button onClick={this.onClick}>Sign Out</Button>\n      </div>\n    );\n  }\n}\n\nexport default SignOut;\n","import SignOut from './SignOut-redux';\n\nexport default SignOut;\n","import { connect } from 'react-redux';\nimport SignOut from './SignOut-view';\n\nexport default connect()(SignOut);\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport SignIn from '../SignIn';\nimport SignOut from '../SignOut';\n\ninterface IProps {\n  user: firebase.User;\n}\n\nclass NavBar extends Component<IProps> {\n  render() {\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Notes For Now</Navbar.Brand>\n        <Nav className=\"mr-auto\" />\n        {this.props.user ? <SignOut /> : <SignIn />}\n      </Navbar>\n    );\n  }\n}\n\nexport default NavBar;\n","import NavBar from './NavBar-redux';\n\nexport default NavBar;\n","import NavBar from './NavBar-view';\nimport { connect } from 'react-redux';\n\ninterface IState {\n  user: firebase.User;\n}\n\nconst mapStateToProps = ({ user }: IState) => ({ user });\n\nexport default connect(mapStateToProps)(NavBar);\n","import React, { Component } from 'react';\nimport { deleteNoteAction } from '../../actions';\nimport { ActionTypes } from '../../actions/types';\nimport Icon from 'react-icons-kit';\nimport { ic_delete } from '../../utils/icons';\n\ninterface IProps {\n  dispatch: (arg0: ActionTypes) => void;\n  id: string;\n  lastModified: number;\n  active: boolean;\n  user: firebase.User;\n}\n\nclass DeleteNoteButton extends Component<IProps> {\n  render() {\n    return (\n      <div className=\"delete-note-button\" onClick={e => this.onClick(e)}>\n        <Icon icon={ic_delete} />\n      </div>\n    );\n  }\n\n  onClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    this.props.dispatch(\n      deleteNoteAction(this.props.id, this.props.lastModified, this.props.active)\n    );\n  };\n}\n\nexport default DeleteNoteButton;\n","import DeleteNoteButton from './DeleteNoteButton-redux';\n\nexport default DeleteNoteButton;\n","import DeleteNoteButton from './DeleteNoteButton-view';\nimport { connect } from 'react-redux';\n\ninterface IState {\n  user: firebase.User;\n}\nconst mapStateToProps = ({ user }: IState) => ({ user });\nexport default connect(mapStateToProps)(DeleteNoteButton);\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { setNoteActiveAction } from '../../actions';\nimport './NavigatorItem.css';\nimport { INotesList } from '../../interfaces';\nimport { ActionTypes } from '../../actions/types';\nimport DeleteNoteButton from '../DeleteNoteButton';\n\ninterface IProps {\n  user: firebase.User | null;\n  notesList: INotesList;\n  active: boolean;\n  dispatch: (arg0: ActionTypes) => void;\n  id: string;\n  title: string;\n  preview: string;\n}\nclass NavigatorItem extends Component<IProps> {\n  componentDidUpdate(): void {}\n\n  onClick(): void {\n    this.props.dispatch(setNoteActiveAction(this.props.id));\n    let title = this.props.notesList[this.props.id].data.title;\n    document.title = `Notes App | ${title || 'Untitled note'}`;\n  }\n\n  render(): JSX.Element {\n    let classes = classNames('navigator-item', {\n      active: this.props.active,\n    });\n\n    const nbsp = '\\u00A0';\n    return (\n      <div className={classes} onClick={() => this.onClick()}>\n        <div className=\"toprow\">\n          <h4>{this.props.title || nbsp}</h4>\n          <DeleteNoteButton\n            id={this.props.id}\n            lastModified={this.props.notesList[this.props.id].lastModified}\n            active={this.props.notesList[this.props.id].active}\n          />\n        </div>\n        <p>{this.props.preview || nbsp}</p>\n      </div>\n    );\n  }\n}\n\nexport default NavigatorItem;\n","import NavigatorItem from \"./NavigatorItem-redux\";\n\nexport default NavigatorItem;\n","import NavigatorItem from './NavigatorItem-view';\nimport { connect } from 'react-redux';\nimport { INotesList } from '../../interfaces';\n\ninterface IState {\n  user: firebase.User;\n  notesList: INotesList;\n}\nconst mapStateToProps = ({ user, notesList }: IState) => ({ user, notesList });\n\nexport default connect(mapStateToProps)(NavigatorItem);\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { addNewNoteAction } from '../../actions';\nimport './NewNoteButton.css';\nimport { ActionTypes } from '../../actions/types';\nimport uuid from 'uuid/v4';\n\ninterface IProps {\n  dispatch: (arg0: ActionTypes) => void;\n}\n\nconst NewNoteButton = (props: IProps) => {\n  return <Button className=\"new-note-btn\" onClick={() => onClick(props)} />;\n};\n\nconst onClick = (props: IProps) => {\n  let newNoteId = uuid();\n  props.dispatch(addNewNoteAction(newNoteId));\n};\n\nexport default NewNoteButton;\n","import NewNoteButton from \"./NewNoteButton-redux\";\n\nexport default NewNoteButton;\n","import NewNoteButton from './NewNoteButton-view';\nimport { connect } from 'react-redux';\n\nexport default connect()(NewNoteButton);\n","import React, { Component, Fragment } from 'react';\nimport NavigatorItem from '../NavigatorItem';\nimport NewNoteButton from '../NewNoteButton';\nimport './Navigator.css';\nimport { INotesList } from '../../interfaces';\n\ninterface IProps {\n  notesList: INotesList;\n}\n\nclass Navigator extends Component<IProps> {\n  getListOfItems(notesList: INotesList) {\n    let list: any = [];\n    Object.keys(notesList)\n      .sort((a, b) =>\n        notesList[a].lastModified < notesList[b].lastModified ? 1 : -1\n      )\n      .forEach(key =>\n        list.push(\n          <NavigatorItem\n            title={notesList[key].data.title || 'Untitled note'}\n            preview={notesList[key].data.preview}\n            active={notesList[key].active}\n            id={key}\n            key={key}\n          />\n        )\n      );\n    return list;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <NewNoteButton />\n        <div className=\"notes-list\">\n          {this.getListOfItems(this.props.notesList)}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Navigator;\n","import Navigator from './Navigator-redux';\n\nexport default Navigator;\n","import Navigator from './Navigator-view';\nimport { connect } from 'react-redux';\nimport { INotesList } from '../../interfaces';\n\ninterface IState {\n  notesList: INotesList;\n  user: firebase.User;\n}\n\nconst mapStateToProps = ({ notesList, user }: IState) => ({ notesList, user });\nexport default connect(mapStateToProps)(Navigator);\n","import { Editor } from 'slate-react';\n\nfunction MarkHotKey(options: { key: string; type: string }) {\n  const { key, type } = options;\n  // Return our \"plugin\" object, containing the `onKeyDown` handler.\n  return {\n    onKeyDown(event: KeyboardEvent, editor: Editor, next: () => any) {\n      // If it doesn't match our `key`, let other plugins handle it.\n      if (!event.metaKey || event.key !== key) return next();\n      // Prevent the default characters from being inserted.\n      event.preventDefault();\n      // Toggle the mark `type`.\n      editor.toggleMark(type);\n    },\n  };\n}\n\nexport default MarkHotKey;\n","import NoteToolbar from './NoteToolbar-view';\n\nexport default NoteToolbar;\n","import React, { Component } from 'react';\n\nimport './NoteToolbar.css';\n\nclass NoteToolbar extends Component {\n  render() {\n    return <div className=\"format-toolbar\" {...this.props} />;\n  }\n}\n\nexport default NoteToolbar;\n","import ToolbarButton from './ToolbarButton-view';\n\nexport default ToolbarButton;\n","import React from 'react';\nimport Icon from 'react-icons-kit';\nimport classNames from 'classnames';\nimport './ToolbarButton.css';\n\ninterface IProps {\n  active: boolean;\n  onPointerDown: (e: PointerEvent) => void;\n  icon: any;\n}\n\nconst ToolbarButton = (props: IProps) => {\n  let classes = classNames('tooltip-icon-button', {\n    active: props.active,\n  });\n  return (\n    <button\n      className={classes}\n      onPointerDown={(\n        e: PointerEvent | React.PointerEvent<HTMLButtonElement>\n      ) => props.onPointerDown(e as PointerEvent)}\n    >\n      <Icon icon={props.icon} />\n    </button>\n  );\n};\n\nexport default ToolbarButton;\n","import React from 'react';\nimport { setNoteTitleAction } from '../../actions';\nimport './NoteTitle.css';\nimport { INotesList } from '../../interfaces';\nimport { ActionTypes } from '../../actions/types';\n\ninterface IProps {\n  text: string;\n  notesList: INotesList;\n  dispatch: (arg0: ActionTypes) => void;\n}\n\nconst NoteTitle = (props: IProps): JSX.Element => {\n  return (\n    <textarea\n      maxLength={50}\n      value={props.text}\n      onChange={evt => onChange(props, evt)}\n      onKeyDown={onKeyDown}\n      placeholder=\"Untitled note\"\n    />\n  );\n};\n\nconst onChange = (props: IProps, event: React.ChangeEvent<HTMLTextAreaElement>) => {\n  let title = event.target.value;\n\n  let activeNoteId = Object.keys(props.notesList).find(key => props.notesList[key].active === true);\n  if (!activeNoteId) {\n    console.error('Could not get active note id');\n    return;\n  }\n\n  document.title = title ? 'Notes App | ' + title : 'Notes App';\n  props.dispatch(setNoteTitleAction(activeNoteId, title));\n};\n\nconst onKeyDown = (event: React.KeyboardEvent): void => {\n  if (event.keyCode === 13) {\n    event.preventDefault();\n  }\n};\n\nexport default NoteTitle;\n","import NoteTitle from './NoteTitle-redux';\n\nexport default NoteTitle;\n","import NoteTitle from './NoteTitle-view';\nimport { connect } from 'react-redux';\nimport { INotesList } from '../../interfaces';\n\ninterface IState {\n  notesList: INotesList;\n}\nconst mapStateToProps = ({ notesList }: IState) => ({ notesList });\n\nexport default connect(mapStateToProps)(NoteTitle);\n","import SyncedStatus from './SyncedStatus-view';\n\nexport default SyncedStatus;\n","import React, { Fragment } from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport Icon from 'react-icons-kit';\nimport { ic_done } from '../../utils/icons';\n\ninterface IProps {\n  synced: boolean;\n}\n\nconst SyncedStatus = (props: IProps) => {\n  return (\n    <Fragment>\n      {props.synced === false ? (\n        <Spinner size=\"sm\" animation=\"grow\" role=\"status\" />\n      ) : (\n        <Icon icon={ic_done} />\n      )}\n    </Fragment>\n  );\n};\n\nexport default SyncedStatus;\n","import React from 'react';\nimport SyncedStatus from '../SyncedStatus';\nimport './LastModified.css';\n\ninterface IProps {\n  date: number;\n  user: firebase.User | undefined;\n  synced: boolean;\n}\n\nconst LastModified = (props: IProps) => (\n  <div>\n    <div className=\"last-modified\">\n      Last modified on {convertEpochToDate(props.date)}\n      &nbsp;\n      {props.user && <SyncedStatus synced={props.synced} />}\n    </div>\n  </div>\n);\n\nconst convertEpochToDate = (epoch: number) => {\n  return new Date(epoch).toLocaleString();\n};\n\nexport default LastModified;\n","import LastModified from './LastModified-redux';\n\nexport default LastModified;\n","import LastModified from './LastModified-view';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (user: firebase.User) => user;\n\nexport default connect(mapStateToProps)(LastModified);\n","import React, { Component, Fragment } from 'react';\nimport { Editor, RenderBlockProps, RenderMarkProps } from 'slate-react';\nimport { setActiveNoteValueAction, updateSyncedStatusAction } from '../../actions';\n\nimport * as icons from '../../utils/icons';\nimport * as plugins from '../../utils/slate/plugins';\nimport NoteToolbar from '../NoteToolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport NoteTitle from '../NoteTitle';\nimport LastModified from '../LastModified';\nimport { INotesList, INote } from '../../interfaces';\n\nimport './NoteEditor.css';\nimport { Value, Block, Document } from 'slate';\nimport { ActionTypes } from '../../actions/types';\nimport initialValue from '../../utils/slate/initialValue';\n\nconst DEFAULT_NODE = 'paragraph';\n\ninterface IProps {\n  user: firebase.User;\n  notesList: INotesList;\n  dispatch: (arg0: ActionTypes) => void;\n  synced: boolean;\n}\n\nclass NoteEditor extends Component<IProps> {\n  private pluginList: any;\n  private editor: any;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.pluginList = [\n      plugins.MarkHotKey({ key: 'b', type: 'bold' }),\n      plugins.MarkHotKey({ key: 'i', type: 'italic' }),\n      plugins.MarkHotKey({ key: 'u', type: 'underline' }),\n    ];\n  }\n\n  componentDidUpdate() {\n    const activeNote = this.getActiveNote();\n    if (activeNote) {\n      const title = activeNote.data.title;\n      document.title = `Notes App | ${title || 'Untitled note'}`;\n    }\n  }\n\n  ref = (editor: any): void => {\n    this.editor = editor;\n  };\n\n  getActiveNote = (): INote | undefined => {\n    let { notesList } = this.props;\n    return Object.values(notesList).find(note => note.active);\n  };\n\n  // On change, update the app's React state with the new editor value.\n  onChange = ({ value }: { value: Value }): void => {\n    let activeNoteId = Object.keys(this.props.notesList).find(\n      key => this.props.notesList[key].active === true\n    );\n    let activeNote = this.getActiveNote();\n    if (!activeNoteId || !activeNote) {\n      return;\n    }\n\n    let changed = activeNote.data.value.document !== value.document;\n    if (changed && this.props.user) {\n      this.props.dispatch(updateSyncedStatusAction(false));\n    }\n\n    let updateLastModified = changed;\n\n    let preview = (value.toJSON().document!.nodes![0] as any).nodes[0].text;\n\n    this.props.dispatch(setActiveNoteValueAction(activeNoteId, value, updateLastModified, preview));\n  };\n\n  hasBlock = (type: string): boolean => {\n    let activeNote = this.getActiveNote();\n    if (activeNote) {\n      const { value } = activeNote.data;\n      return value.blocks.some(node => {\n        if (!node) {\n          return false;\n        }\n        return node.type === type;\n      });\n    }\n    return false;\n  };\n\n  hasMark = (type: string): boolean => {\n    let activeNote = this.getActiveNote();\n    if (activeNote) {\n      const { value } = activeNote.data;\n      return value.activeMarks.some(mark => {\n        if (!mark) {\n          return false;\n        }\n        return mark.type === type;\n      });\n    }\n    return false;\n  };\n\n  onBlockClick = (event: PointerEvent, type: string) => {\n    event.preventDefault();\n\n    const { editor } = this;\n    const { value } = editor;\n    const { document } = value;\n\n    // Handle everything but list buttons.\n    if (type !== 'bulleted-list' && type !== 'numbered-list') {\n      const isActive = this.hasBlock(type);\n      const isList = this.hasBlock('list-item');\n\n      if (isList) {\n        editor\n          .setBlocks(isActive ? DEFAULT_NODE : type)\n          .unwrapBlock('bulleted-list')\n          .unwrapBlock('numbered-list');\n      } else {\n        editor.setBlocks(isActive ? DEFAULT_NODE : type);\n      }\n    } else {\n      // Handle the extra wrapping required for list buttons.\n      const isList = this.hasBlock('list-item');\n      const isType = value.blocks.some((block: Block) => {\n        return !!document.getClosest(block.key, (parent: Document) => parent.type === type);\n      });\n\n      if (isList && isType) {\n        editor\n          .setBlocks(DEFAULT_NODE)\n          .unwrapBlock('bulleted-list')\n          .unwrapBlock('numbered-list');\n      } else if (isList) {\n        editor\n          .unwrapBlock(type === 'bulleted-list' ? 'numbered-list' : 'bulleted-list')\n          .wrapBlock(type);\n      } else {\n        editor.setBlocks('list-item').wrapBlock(type);\n      }\n    }\n  };\n\n  onMarkClick = (event: PointerEvent, type: string) => {\n    event.preventDefault();\n    this.editor.toggleMark(type);\n  };\n\n  renderBlock = (props: RenderBlockProps, editor: any, next: () => any): any => {\n    switch (props.node.type) {\n      case 'heading-one':\n        return <h1 {...props.attributes}>{props.children}</h1>;\n      case 'heading-two':\n        return <h2 {...props.attributes}>{props.children}</h2>;\n      case 'bulleted-list':\n        return <ul {...props.attributes}>{props.children}</ul>;\n      case 'numbered-list':\n        return <ol {...props.attributes}>{props.children}</ol>;\n      case 'list-item':\n        return <li {...props.attributes}>{props.children}</li>;\n      case 'block-quote':\n        return <blockquote {...props.attributes}>{props.children}</blockquote>;\n      default:\n        return next();\n    }\n  };\n\n  renderMark = (props: RenderMarkProps, editor: any, next: () => any): any => {\n    switch (props.mark.type) {\n      case 'bold':\n        return <strong {...props.attributes}>{props.children}</strong>;\n      case 'italic':\n        return (\n          <em property=\"italic\" {...props.attributes}>\n            {props.children}\n          </em>\n        );\n      case 'code':\n        return <code {...props.attributes}>{props.children}</code>;\n      case 'underline':\n        return <u {...props.attributes}>{props.children}</u>;\n      default: {\n        return next();\n      }\n    }\n  };\n\n  renderMarkButton(type: string, icon: any) {\n    return (\n      <ToolbarButton\n        active={this.hasMark(type)}\n        onPointerDown={(e: PointerEvent) => this.onMarkClick(e, type)}\n        icon={icon}\n      />\n    );\n  }\n\n  renderBlockButton = (type: string, icon: any) => {\n    let isActive = this.hasBlock(type);\n\n    if (['numbered-list', 'bulleted-list'].includes(type)) {\n      let activeNote = this.getActiveNote();\n      if (!activeNote) {\n        return;\n      }\n      let { document, blocks } = activeNote.data.value;\n      if (blocks.size > 0) {\n        const parent = document.getParent(blocks.first().key);\n        isActive =\n          (this.hasBlock('list-item') && parent && (parent as { type: any }).type === type) ||\n          false;\n      }\n    }\n\n    return (\n      <ToolbarButton\n        active={isActive}\n        onPointerDown={(event: PointerEvent) => this.onBlockClick(event, type)}\n        icon={icon}\n      />\n    );\n  };\n\n  render() {\n    if (Object.keys(this.props.notesList).length < 1) {\n      document.title = 'Notes App';\n      return null;\n    } else {\n      return (\n        <Fragment>\n          <NoteTitle text={(this.getActiveNote() || { data: { title: '' } }).data.title} />\n          <NoteToolbar>\n            {this.renderMarkButton('bold', icons.ic_format_bold)}\n            {this.renderMarkButton('italic', icons.ic_format_italic)}\n            {this.renderMarkButton('underline', icons.ic_format_underlined)}\n            {this.renderMarkButton('code', icons.ic_code)}\n            {this.renderBlockButton('block-quote', icons.ic_format_quote)}\n            {this.renderBlockButton('bulleted-list', icons.ic_format_list_bulleted)}\n            {this.renderBlockButton('numbered-list', icons.ic_format_list_numbered)}\n            {this.renderBlockButton('heading-one', icons.ic_looks_one)}\n            {this.renderBlockButton('heading-two', icons.ic_looks_two)}\n          </NoteToolbar>\n          <Editor\n            ref={this.ref}\n            plugins={this.pluginList}\n            value={(this.getActiveNote() || { data: { value: initialValue } }).data.value}\n            onChange={this.onChange}\n            renderBlock={this.renderBlock}\n            renderMark={this.renderMark}\n            autoFocus={true}\n          />\n          <LastModified\n            date={(this.getActiveNote() || { lastModified: new Date().getTime() }).lastModified}\n            user={this.props.user}\n            synced={this.props.synced}\n          />\n        </Fragment>\n      );\n    }\n  }\n}\n\nexport default NoteEditor;\n","import NoteEditor from './NoteEditor-redux';\n\nexport default NoteEditor;\n","import NoteEditor from './NoteEditor-view';\nimport { connect } from 'react-redux';\nimport { INotesList } from '../../interfaces';\n\ninterface IState {\n  notesList: INotesList;\n  user: firebase.User;\n  synced: boolean;\n}\n\nconst mapStateToProps = ({ notesList, user, synced }: IState) => ({\n  notesList,\n  user,\n  synced,\n});\n\nexport default connect(mapStateToProps)(NoteEditor);\n","import React, { Fragment } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport './App.css';\nimport NavBar from '../NavBar';\nimport Navigator from '../Navigator';\nimport NoteEditor from '../NoteEditor';\n\nconst App = () => (\n  <Fragment>\n    <div className=\"main\">\n      <NavBar />\n      <Row>\n        <Col sm={3} md={3} lg={3}>\n          <div className=\"navigator\">\n            <Navigator />\n          </div>\n        </Col>\n        <Col sm={9} md={9} lg={9}>\n          <div className=\"note-editor\">\n            <NoteEditor />\n          </div>\n        </Col>\n      </Row>\n    </div>\n  </Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}